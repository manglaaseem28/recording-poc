
const dotenv = require("dotenv");
dotenv.config();
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const AWS_S3 = require("aws-sdk");
const fs = require("fs");
const storageBucket = process.env.AWS_S3_BUCKET
console.log(storageBucket)
//const dirName = process.env["FILE_PATH"];
const base_folder_name = 'testVideo';
const appConfig = {
    AWS: {
        region: process.env.AWS_DEFAULT_REGION
    },
};
appConfig.AWS.accessKeyId = process.env.AWS_ACCESS_KEY_ID
appConfig.AWS.secretAccessKey = process.env.AWS_SECRET_ACCESS_KEY
AWS_S3.config.update(appConfig.AWS);
const s3 = new AWS_S3.S3();
// defining the Express app
const app = express();
// defining an array to work as the database (temporary solution)
// adding Helmet to enhance your Rest API's security
app.use(helmet());

// using bodyParser to parse JSON bodies into JS objects
app.use(bodyParser.json());

// enabling CORS for all requests
app.use(cors());

// adding morgan to log HTTP requests
app.use(morgan('combined'));

// defining an endpoint to return all ads

function getFileList(data){
    if(!data){
        return [];
    }
    if(!data.file){
        return [];
    }
    if(!Array.isArray(data.file)){
        return [];
    }
    return data.file.map(d => {const item = {'originalFileName':d.originalFileName,
                'path':d.path}
        return item;})
}
app.get('/recordings', (req, res) => {
	lists3Objects()
	.then(list => {
       		res.status(200).json({message:"Success",data:list});
	})
	.catch(e => {
	console.log(e);
		res.status(500).json({message:'Internal Server Error'})
	})
});
var multiparty = require('multiparty');
var util = require('util');
const uploadNewFile = (fileName, location) =>{
    return new Promise(async function (resolve, reject) {
      fs.readFile(location, (err, fileContent) => {
        if (err) {
          reject(err);
          return;
        }
        const params = {
          Bucket: storageBucket,
          Key: fileName,
          Body: fileContent,
        };
        s3.upload(params, function (s3Err, data) {
          let result = {};
          if (s3Err) {
            console.error(`uploadNewFile Err: ${s3Err}`);
            reject(s3Err);
          } else {
            result.success = true;
            console.log(`uploadNewFile response: ${JSON.stringify(data)}`);
            resolve(result);
          }
        });
      });
    });
}
const lists3Objects = async (storageBucket) => {
    return new Promise((resolve, reject) => {
        try {
            const params = {
                Bucket: process.env.AWS_S3_BUCKET,
                Prefix: base_folder_name
            }
		console.log(params)
            let s3ObjectListPromise = s3.listObjects(params).promise();
            s3ObjectListPromise.then((data) => {
                // console.log(data);
                resolve(data.Contents)
            })
            s3ObjectListPromise.catch((err) => {
                console.log(err);
                reject(err)
            })
        } catch (error) {
            console.log(error);
            reject(error)
        }
    })
}
app.post('/events',(req,res) => {
    var form = new multiparty.Form();
    form.parse(req, function(err, fields, files) {
        // fields fields fields
	const fileList = getFileList(files)  
  	console.log(fileList)
	if(fileList.length){
	
	}else{
		res.send('ok')
	}
//	console.log(util.inspect({ fields: fields, files: files }))
	res.send('ok')
	});
//res.send('')
});
const port = process.env.PORT || 3000;
// starting the server
app.listen(port, () => {
  console.log(`listening on port ${port}`);
});

uploadNewFile(base_folder_name+'/recrec20220616_215034.mp4','/tmp/citkPnAPkq8cTo9EuGA3cZWC.mp4')
